package com.mendoprojects.mylibrary.book;

import org.springframework.format.annotation.DateTimeFormat;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.*;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;


import java.text.DateFormat;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.Optional;

@Controller
@RequestMapping(path = "/")
public class BookController {
    @Autowired // This means to get the bean called bookRepository
    // Which is auto-generated by Spring, we will use it to handle the data
    private BookRepository bookRepository;

    @PostMapping(path = "/books/add") // Map ONLY POST Requests
    public String addNewBook() {
        // @ResponseBody means the returned String is the response, not a view name
        // @RequestParam means it is a parameter from the GET or POST request
        Book n = new Book();
        bookRepository.save(n);
        return "redirect:/books";
    }

    @GetMapping(path = "/books")
    public String getAllBooks(Model model) {
        Iterable<Book> books = bookRepository.findAll();
        model.addAttribute("books", books);
        return "mylibrary";
    }

    @GetMapping(path = "/books/{id}")
    public String pickBook(@PathVariable Long id, Model model) {
        Optional<Book> book = bookRepository.findById(id);
        if(book.isEmpty()) {
            return "redirect:/mylibrary";
        }
        model.addAttribute("book", book.get());
        return "edit-book";
    }

//is it normal to throw exception here?:)
    @PostMapping(path = "/books/{id}/edit")
    public String editBook(@PathVariable Long id,
                           @RequestParam String name,
                           @RequestParam String publish,
                           @RequestParam(required = false) Date issuance,
                           @RequestParam String stdnt_name,
                           @RequestParam(required = false) Date returning)  {
        Optional<Book> book = bookRepository.findById(id);
        if (book.isPresent()) {
//            DateFormat outputFormatter = new SimpleDateFormat("MM/dd/yyyy");
            Book editedBook = book.get();
            editedBook.setName(name);
            editedBook.setPublish(publish);
//            editedBook.setIssuance(outputFormatter.parse(outputFormatter.format(issuance)));
//            editedBook.setReturning(outputFormatter.parse(outputFormatter.format(returning)));
            editedBook.setReturning(returning);
            editedBook.setIssuance(issuance);
            editedBook.setStdnt_name(stdnt_name);
            bookRepository.save(editedBook);
        }
        return "redirect:/books";
    }

    @PostMapping(path = "/books/{id}/remove")
    public String removeBook(@PathVariable Long id) {
        if (bookRepository.existsById(id)) {
            bookRepository.deleteById(id);
        }
        return "redirect:/books";
    }
}
